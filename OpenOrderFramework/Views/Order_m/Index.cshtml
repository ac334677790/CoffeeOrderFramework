@*@model IEnumerable<openorderframework.models.order_m>*@
@using PagedList.Mvc
@model OpenOrderFramework.ViewModels.Order_mListViewModel
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div style="text-align:center;display:inline">
    <h2>@ViewBag.ProgramName <small>@Resources.Common.Index</small></h2>
</div>


<div class="well" id="Search">
    @using (Html.BeginForm("Index", "Order_m",
        FormMethod.Post,
        new { @class = "form-horizontal", role = "form", id = "PageList" }))
    {
        <div class="row">
            <div class="col-md-4 form-group">
                @*<label class="col-lg-3 control-label">Product Name:</label>*@
                @Html.LabelFor(x => x.order_m.OrderNo, new { @class = "col-lg-3 control-label" })
                <div class="col-lg-5">
                    @Html.EditorFor(x => x.SearchParameter.OrderNo, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>
            <div class="col-md-4 form-group">
                @*<label class="col-lg-3 control-label">Quantity Per Unit:</label>*@
                @Html.LabelFor(x => x.order_m.OrderDateTime, new { @class = "col-lg-3 control-label" })
                <div class="col-lg-5">
                    @Html.EditorFor(x => x.SearchParameter.OrderDateTime, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>
            <div class="col-md-4 form-group">
                @*<label class="col-lg-3 control-label">Quantity Per Unit:</label>*@
                @Html.LabelFor(x => x.order_m.CustomerID, new { @class = "col-lg-3 control-label" })
                <div class="col-lg-5">
                    @Html.EditorFor(x => x.SearchParameter.CustomerID, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>
            <div class="col-md-4 form-group">
                @*<label class="col-lg-3 control-label">Quantity Per Unit:</label>*@
                @Html.LabelFor(x => x.order_m.CustName, new { @class = "col-lg-3 control-label" })
                <div class="col-lg-5">
                    @Html.EditorFor(x => x.SearchParameter.CustName, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>

            <div class="col-md-4 form-group">
                @*<label class="col-lg-3 control-label">Quantity Per Unit:</label>*@
                @Html.LabelFor(x => x.order_m.DataStatus, new { @class = "col-lg-3 control-label" })
                <div class="col-lg-5">
                    @Html.DropDownListFor(x => x.SearchParameter.DataStatus, (SelectList)Model.DataStatuses, "-- select item --", new { @class = "form-control" })
                </div>
            </div>
        </div>
        <div class="row">
            @*<div class="col-md-6 form-group">
                    <label class="col-lg-3 control-label">Supplier:</label>
                    <div class="col-lg-8">
                        @Html.DropDownListFor(x => x.SearchParameter.Supplier, (SelectList)Model.Suppliers, "-- select item --", new { @class = "form-control" })
                    </div>
                </div>*@
        </div>
        <span class="clearfix"></span>
        <div class="row">
            <div class="col-md-offset-5">
                <input type="reset" class="btn btn-default" value=@Resources.Common.Cancel>
                <span></span>
                <input type="submit" class="btn btn-primary" value=@Resources.Common.Search>
</div>
        </div>
    }
</div>

<table class="table">
    <thead>
        <tr id="sticker">
            <th>

                <div class="btn-group" role="group" aria-label="...">

                    @Html.ActionLink(Resources.Common.Create, "Create", "", new { @class = "fancybox fancybox.iframe btn btn-default btn-group btn-sm", role = "group" })
                    <a class="fancybox btn btn-default btn-group btn-sm" href="#Search">查詢</a>

                </div>
            </th>
        </tr>
    </thead>
    <tr>
        <td>
            @Html.PagedListPager(Model.Order_ms,
    page => Url.Action("Index", new { page }),
    PagedListRenderOptions.ClassicPlusFirstAndLast)
        </td>
    </tr>
    <tr>
        <td>
            <div class="container">
                <div class="row warning">
                    @foreach (var item in Model.Order_ms)
                    {
                        //decimal total = 0;
                        //foreach (var item_d in Model.Order_ds)
                        //{
                        //    if (item_d.OrderNo == item.OrderNo)
                        //    {
                        //        total += item_d.Total;
                        //    }
                        //}
                        <div class="col-lg-4 col-sm-6">
                            <div class="card">
                                <div class="card-block">
                                    <div class="col-lg-4">
                                        <h4 class="card-title">@Html.DisplayFor(modelItem => item.OrderNo)</h4>
                                    </div>
                                    <div class="col-lg-8 text-right">
                                        <h4 class="card-title">
                                            @*@Html.DisplayNameFor(model => model.order_m.DataStatus)：*@
                                            @if (@Model.CodeOrderDataStatus.ContainsKey(item.DataStatus))
                                            {@Model.CodeOrderDataStatus[item.DataStatus] }
                                            else
                                            {@Html.DisplayFor(modelItem => item.DataStatus)}
                                        </h4>
                                    </div>
                                    <table class="table">
                                        <tr>
                                            <td>
                                                @Html.DisplayNameFor(model => model.order_m.OrderDateTime)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.OrderDateTime)
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>
                                                @Html.DisplayNameFor(model => model.order_m.DeliveryDateTime)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.DeliveryDateTime)
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>
                                                @Html.DisplayNameFor(model => model.order_m.ContactName)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.ContactName)
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>
                                                @Html.DisplayNameFor(model => model.order_m.PayKind)
                                            </td>
                                            <td>
                                                @if (@Model.CodePayment.ContainsKey(item.PayKind))
                                                {@Model.CodePayment[item.PayKind] }
                                                else
                                                {@Html.DisplayFor(modelItem => item.PayKind)}
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>總計</td>
                                            <td>@Html.DisplayFor(modelItem => item.total)</td>
                                        </tr>
                                        <tr>
                                            <td>@Html.DisplayNameFor(model => model.order_m.CheckUserID)</td>
                                            <td></td>

                                        </tr>
                                        <tr>
                                            <td>
                                                @Html.DisplayNameFor(model => model.order_m.Promotional)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.Promotional)
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>
                                                @Html.DisplayNameFor(model => model.order_m.Memo)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.Memo)
                                            </td>


                                        </tr>
                                        <tr>
                                            <td>
                                                @Html.ActionLink(Resources.Common.DetailList, "../order_d/Index", new { id = item.CompanyID + ',' + @item.OrderNo }, new { @class = "fancybox fancybox.iframe", role = "group" }) |
                                                @Html.ActionLink(Resources.Common.Edit, "Edit", new { id = item.CompanyID + ',' + @item.OrderNo }, new { @class = "fancybox fancybox.iframe", role = "group" }) |
                                                @Html.ActionLink(Resources.Common.Delete, "Delete", new { id = item.CompanyID + ',' + @item.OrderNo }, new { @class = "fancybox fancybox.iframe", role = "group" }) |
                                                @Html.ActionLink(Resources.Common.Details, "Details", new { id = item.CompanyID + ',' + @item.OrderNo }, new { @class = "fancybox fancybox.iframe", role = "group" })
                                            </td>
                                        </tr>
                                    </table>
                                </div>
                            </div>
                        </div>
                    }


                </div>
            </div>




        </td>
    </tr>
</table>
@section scripts
{
    <script type="text/javascript">
        $(function () {
            $('.pagination>li>a[href]').each(function (i, item) {
                var page = $(item).attr('href').replace('/Order_m?page=', '');
                $(item).attr('href', '#').click(function () { postPage(page); });

            });

            //設定刷新
            var myVar = setInterval(myTimer, 5000);

            $('#element').on('click', function (e) {
                Custombox.open({
                    target: '#modal',
                    effect: 'fadein'
                });
                e.preventDefault();
            });


            //浮動th
            var offset = $('.navbar-collapse').height();
            $("table").stickyTableHeaders({ fixedOffset: offset });

        });

        function postPage(page) {
            var targetFormId = '#PageList';
            if ($(targetFormId).size() > 0) {
                $('<input>')
                    .attr({ type: 'hidden', id: 'PageIndex', name: 'PageIndex', value: page })
                    .appendTo($(targetFormId));
                $(targetFormId).submit();
            }
        };


        function myTimer() {
            $.toast({
                text: "新訂單！", // Text that is to be shown in the toast
                heading: '新訂單！', // Optional heading to be shown on the toast

                showHideTransition: 'slide', // fade, slide or plain
                allowToastClose: true, // Boolean value true or false
                hideAfter: 3000, // false to make it sticky or number representing the miliseconds as time after which toast needs to be hidden
                stack: 5, // false if there should be only one toast at a time or a number representing the maximum number of toasts to be shown at a time
                position: 'bottom-right', // bottom-left or bottom-right or bottom-center or top-left or top-right or top-center or mid-center or an object representing the left, right, top, bottom values

                bgColor: '#007196',  // Background color of the toast
                textColor: '#eeeeee',  // Text color of the toast
                textAlign: 'left',  // Text alignment i.e. left, right or center
                loader: false,  // Whether to show loader or not. True by default
                loaderBg: '#9EC600',  // Background color of the toast loader
                beforeShow: function () { }, // will be triggered before the toast is shown
                afterShown: function () { }, // will be triggered after the toat has been shown
                beforeHide: function () { }, // will be triggered before the toast gets hidden
                afterHidden: function () { }  // will be triggered after the toast has been hidden
            });
        }


    </script>
}
