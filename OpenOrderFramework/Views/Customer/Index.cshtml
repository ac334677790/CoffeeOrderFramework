@*@model IEnumerable<openorderframework.models.customer>*@
@using PagedList.Mvc
@model OpenOrderFramework.ViewModels.CustomerListViewModel
    @{
        ViewBag.Title = "Index";
        Layout = "~/Views/Shared/_Layout.cshtml";
    }

<div style="text-align:center;display:inline">
    <h2>@ViewBag.ProgramName <small>@Resources.Common.Index</small></h2>
</div>
<div class="well" id="Search">
    @using (Html.BeginForm("Index", "Customer",
        FormMethod.Post,
        new { @class = "form-horizontal", role = "form", id = "PageList" }))
    {
        <div class="row">
            <div class="col-md-6 form-group">
                @*<label class="col-lg-3 control-label">Product Name:</label>*@
                @Html.LabelFor(x => x.Customers.FirstOrDefault().CustomerID, new { @class = "col-lg-3 control-label" })
                <div class="col-lg-8">
                    @Html.EditorFor(x => x.SearchParameter.CustomerID, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>
            <div class="col-md-6 form-group">
                @*<label class="col-lg-3 control-label">Quantity Per Unit:</label>*@
                @Html.LabelFor(x => x.Customers.FirstOrDefault().CustName, new { @class = "col-lg-3 control-label" })
                <div class="col-lg-8">
                    @Html.EditorFor(x => x.SearchParameter.CustName, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>
        </div>
        <div class="row">
            @*<div class="col-md-6 form-group">
                    <label class="col-lg-3 control-label">Supplier:</label>
                    <div class="col-lg-8">
                        @Html.DropDownListFor(x => x.SearchParameter.Supplier, (SelectList)Model.Suppliers, "-- select item --", new { @class = "form-control" })
                    </div>
                </div>*@
            @*<div class="col-md-6 form-group">
                    <label class="col-lg-3 control-label">Category:</label>
                    <div class="col-lg-8">
                        @Html.DropDownListFor(x => x.SearchParameter.ProductID, (SelectList)Model.ProductIDs, "-- select item --", new { @class = "form-control" })
                    </div>
                </div>*@
        </div>
        <span class="clearfix"></span>
        <div class="row">
            <div class="col-md-offset-5">
                <input type="submit" class="btn btn-primary" value=@Resources.Common.Search>
                <span></span>
                <input type="reset" class="btn btn-default" value=@Resources.Common.Cancel>
            </div>
        </div>
    }
</div>

    <table class="table">
        <thead>
            <tr id="sticker">
                <th>

                    <div class="btn-group" role="group" aria-label="...">

                        @Html.ActionLink(Resources.Common.Create, "Create", "", new { @class = "fancybox fancybox.iframe btn btn-default btn-group btn-sm", role = "group" })
                        <a class="fancybox btn btn-default btn-group btn-sm" href="#Search">查詢</a>

                    </div>
                </th>
            </tr>
            <tr>
                <td>
                    @Html.PagedListPager(Model.Customers,
    page => Url.Action("Index", new { page }),
    PagedListRenderOptions.ClassicPlusFirstAndLast)


                </td>
            </tr>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Customers.FirstOrDefault().CustomerID)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Customers.FirstOrDefault().CustName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Customers.FirstOrDefault().CustPassword)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Customers.FirstOrDefault().ShortName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Customers.FirstOrDefault().SexType)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Customers.FirstOrDefault().CustLevel)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Customers.FirstOrDefault().CustType)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Customers.FirstOrDefault().ContactName)
                </th>
                @*<th>
                    @Html.DisplayNameFor(model => model.Customers.FirstOrDefault().TelephoneNumber)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Customers.FirstOrDefault().MobileNumber)
                </th>*@
                @*<th>
                    @Html.DisplayNameFor(model => model.Customers.FirstOrDefault().Email)
                </th>*@
                <th>
                    @Html.DisplayNameFor(model => model.Customers.FirstOrDefault().EmailValidated)
                </th>
                @*<th>
                    @Html.DisplayNameFor(model => model.Customers.FirstOrDefault().TaxID)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Customers.FirstOrDefault().PostalCode)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Customers.FirstOrDefault().Address)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Customers.FirstOrDefault().PostalCode2)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Customers.FirstOrDefault().Address2)
                </th>*@
                @*<th>
                    @Html.DisplayNameFor(model => model.Customers.FirstOrDefault().Memo)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Customers.FirstOrDefault().ValidDate)
                </th>*@
                @*<th>
                    @Html.DisplayNameFor(model => model.Customers.FirstOrDefault().InValidDate)
                </th>*@
                <th>
                    @Html.DisplayNameFor(model => model.Customers.FirstOrDefault().StoredPoint)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Customers.FirstOrDefault().Birthday)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Customers.FirstOrDefault().Job)
                </th>
                @*<th>
                    @Html.DisplayNameFor(model => model.Customers.FirstOrDefault().CreateUserID)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Customers.FirstOrDefault().CreateDateTime)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Customers.FirstOrDefault().ModifyUserID)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Customers.FirstOrDefault().ModifyDateTime)
                </th>*@
                <th></th>
            </tr>
        </thead>

            @foreach (var item in Model.Customers)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.CustomerID)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.CustName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.CustPassword)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ShortName)
                    </td>
                    <td>
                        @if (@Model.CodeSex.ContainsKey(item.SexType))
                        {@Model.CodeSex[item.SexType] }
                        else
                        {@Html.DisplayFor(modelItem => item.SexType)}
                    </td>
                    <td>
                        @if (@Model.CodeCustLevel.ContainsKey(item.CustLevel))
                        {@Model.CodeCustLevel[item.CustLevel] }
                        else
                        {@Html.DisplayFor(modelItem => item.CustLevel)}
                    </td>
                    <td>
                        @if (@Model.CodeCustType.ContainsKey(item.CustType))
                        {@Model.CodeCustType[item.CustType] }
                        else
                        {@Html.DisplayFor(modelItem => item.CustType)}
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ContactName)
                    </td>
                    @*<td>
                        @Html.DisplayFor(modelItem => item.TelephoneNumber)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.MobileNumber)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Email)
                    </td>*@
                    <td>
                        @if (@Model.CodeYN.ContainsKey(item.EmailValidated))
                        {@Model.CodeYN[item.EmailValidated] }
                        else
                        {@Html.DisplayFor(modelItem => item.EmailValidated)}
                    </td>
                    @*<td>
                        @Html.DisplayFor(modelItem => item.TaxID)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.PostalCode)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Address)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.PostalCode2)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Address2)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Memo)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ValidDate)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.InValidDate)
                    </td>*@
                    <td>
                        @Html.DisplayFor(modelItem => item.StoredPoint)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Birthday)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Job)
                    </td>
                    @*<td>
                        @Html.DisplayFor(modelItem => item.CreateUserID)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.CreateDateTime)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ModifyUserID)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ModifyDateTime)
                    </td>*@
                    <td>
                        @Html.ActionLink(Resources.Common.Edit, "Edit", new { id = item.CustomerID }) |
                        @Html.ActionLink(Resources.Common.Details, "Details", new { id = item.CustomerID }) |
                        @Html.ActionLink(Resources.Common.Delete, "Delete", new { id = item.CustomerID })
                    </td>
                </tr>
            }

</table>
    @section scripts
{
        <script type="text/javascript">
            $(function () {
                $('.pagination>li>a[href]').each(function (i, item) {
                    var page = $(item).attr('href').replace('/Customer?page=', '');
                    $(item).attr('href', '#').click(function () { postPage(page); });

                });
            });

            function postPage(page) {
                var targetFormId = '#PageList';
                if ($(targetFormId).size() > 0) {
                    $('<input>')
                        .attr({ type: 'hidden', id: 'PageIndex', name: 'PageIndex', value: page })
                        .appendTo($(targetFormId));
                    $(targetFormId).submit();
                }
            };
        </script>
    }
